"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.29.1
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from gridly.api_client import ApiClient, Endpoint as _Endpoint
from gridly.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from gridly.model.create_view import CreateView
from gridly.model.export_file_header import ExportFileHeader
from gridly.model.merge_branch_request import MergeBranchRequest
from gridly.model.task import Task
from gridly.model.view import View
from gridly.model.view_statistic import ViewStatistic


class ViewApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_endpoint = _Endpoint(
            settings={
                'response_type': (View,),
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views',
                'operation_id': 'create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_view',
                ],
                'required': [
                    'create_view',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_view':
                        (CreateView,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_view': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.export_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views/{viewId}/export',
                'operation_id': 'export',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'view_id',
                    'column_ids',
                    'file_header',
                    'query',
                    'sort',
                    'type',
                ],
                'required': [
                    'view_id',
                ],
                'nullable': [
                    'column_ids',
                    'query',
                    'sort',
                    'type',
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {
                        'None': None,
                        "CSV": "csv",
                        "TSV": "tsv",
                        "XLS": "xls",
                        "XLSX": "xlsx",
                        "JSON": "json",
                        "PO": "po",
                        "HTML": "html"
                    },
                },
                'openapi_types': {
                    'view_id':
                        (str,),
                    'column_ids':
                        ([str], none_type,),
                    'file_header':
                        (ExportFileHeader,),
                    'query':
                        (str, none_type,),
                    'sort':
                        (str, none_type,),
                    'type':
                        (str, none_type,),
                },
                'attribute_map': {
                    'view_id': 'viewId',
                    'column_ids': 'columnIds',
                    'file_header': 'fileHeader',
                    'query': 'query',
                    'sort': 'sort',
                    'type': 'type',
                },
                'location_map': {
                    'view_id': 'path',
                    'column_ids': 'query',
                    'file_header': 'query',
                    'query': 'query',
                    'sort': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                    'column_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_endpoint = _Endpoint(
            settings={
                'response_type': (View,),
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views/{viewId}',
                'operation_id': 'get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'view_id',
                    'column_ids',
                    'include',
                    'page',
                    'query',
                    'sort',
                ],
                'required': [
                    'view_id',
                ],
                'nullable': [
                    'column_ids',
                    'include',
                    'page',
                    'query',
                    'sort',
                ],
                'enum': [
                    'include',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('include',): {
                        'None': None,
                        "RECORDS": "records"
                    },
                },
                'openapi_types': {
                    'view_id':
                        (str,),
                    'column_ids':
                        ([str], none_type,),
                    'include':
                        ([str], none_type,),
                    'page':
                        (str, none_type,),
                    'query':
                        (str, none_type,),
                    'sort':
                        (str, none_type,),
                },
                'attribute_map': {
                    'view_id': 'viewId',
                    'column_ids': 'columnIds',
                    'include': 'include',
                    'page': 'page',
                    'query': 'query',
                    'sort': 'sort',
                },
                'location_map': {
                    'view_id': 'path',
                    'column_ids': 'query',
                    'include': 'query',
                    'page': 'query',
                    'query': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                    'column_ids': 'multi',
                    'include': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_statistic_endpoint = _Endpoint(
            settings={
                'response_type': (ViewStatistic,),
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views/{viewId}/statistic',
                'operation_id': 'get_statistic',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'view_id',
                    'column_ids',
                ],
                'required': [
                    'view_id',
                ],
                'nullable': [
                    'column_ids',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'view_id':
                        (str,),
                    'column_ids':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'view_id': 'viewId',
                    'column_ids': 'columnIds',
                },
                'location_map': {
                    'view_id': 'path',
                    'column_ids': 'query',
                },
                'collection_format_map': {
                    'column_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.import_view_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views/{viewId}/import',
                'operation_id': 'import_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'view_id',
                    'file',
                    'import_request',
                    'type',
                ],
                'required': [
                    'view_id',
                    'file',
                ],
                'nullable': [
                    'import_request',
                    'type',
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {
                        'None': None,
                        "CSV": "csv",
                        "TSV": "tsv",
                        "XLS": "xls",
                        "XLSX": "xlsx",
                        "JSON": "json",
                        "PO": "po",
                        "HTML": "html"
                    },
                },
                'openapi_types': {
                    'view_id':
                        (str,),
                    'file':
                        (file_type,),
                    'import_request':
                        (str, none_type,),
                    'type':
                        (str, none_type,),
                },
                'attribute_map': {
                    'view_id': 'viewId',
                    'file': 'file',
                    'import_request': 'importRequest',
                    'type': 'type',
                },
                'location_map': {
                    'view_id': 'path',
                    'file': 'form',
                    'import_request': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.list_endpoint = _Endpoint(
            settings={
                'response_type': ([View],),
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views',
                'operation_id': 'list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'branch_id',
                    'grid_id',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "DEFAULTVIEW": "defaultView",
                        "ACCESSVIEW": "accessView",
                        "USERVIEW": "userView",
                        "WORKFLOWVIEW": "workflowView"
                    },
                },
                'openapi_types': {
                    'branch_id':
                        (str,),
                    'grid_id':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'branch_id': 'branchId',
                    'grid_id': 'gridId',
                    'type': 'type',
                },
                'location_map': {
                    'branch_id': 'query',
                    'grid_id': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.merge_endpoint = _Endpoint(
            settings={
                'response_type': (Task,),
                'auth': [
                    'ApiKey'
                ],
                'endpoint_path': '/v1/views/{viewId}/merge',
                'operation_id': 'merge',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'destination_view_id',
                    'view_id',
                    'merge_branch_request',
                    'merge_record_options',
                ],
                'required': [
                    'destination_view_id',
                    'view_id',
                    'merge_branch_request',
                ],
                'nullable': [
                    'merge_record_options',
                ],
                'enum': [
                    'merge_record_options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('merge_record_options',): {
                        'None': None,
                        "ADD": "add",
                        "UPDATE": "update",
                        "DELETE": "delete",
                        "OVERRIDE": "override"
                    },
                },
                'openapi_types': {
                    'destination_view_id':
                        (str,),
                    'view_id':
                        (str,),
                    'merge_branch_request':
                        (MergeBranchRequest,),
                    'merge_record_options':
                        ([str], none_type,),
                },
                'attribute_map': {
                    'destination_view_id': 'destinationViewId',
                    'view_id': 'viewId',
                    'merge_record_options': 'mergeRecordOptions',
                },
                'location_map': {
                    'destination_view_id': 'query',
                    'view_id': 'path',
                    'merge_branch_request': 'body',
                    'merge_record_options': 'query',
                },
                'collection_format_map': {
                    'merge_record_options': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create(
        self,
        create_view,
        **kwargs
    ):
        """create  # noqa: E501

        create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create(create_view, async_req=True)
        >>> result = thread.get()

        Args:
            create_view (CreateView):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            View
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['create_view'] = \
            create_view
        return self.create_endpoint.call_with_http_info(**kwargs)

    def export(
        self,
        view_id,
        **kwargs
    ):
        """export  # noqa: E501

        export  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export(view_id, async_req=True)
        >>> result = thread.get()

        Args:
            view_id (str): viewId

        Keyword Args:
            column_ids ([str], none_type): columnIds. [optional] if omitted the server will use the default value of []
            file_header (ExportFileHeader): fileHeader. [optional]
            query (str, none_type): query. [optional] if omitted the server will use the default value of "{}"
            sort (str, none_type): sort. [optional] if omitted the server will use the default value of "{}"
            type (str, none_type): type. [optional] if omitted the server will use the default value of "csv"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['view_id'] = \
            view_id
        return self.export_endpoint.call_with_http_info(**kwargs)

    def get(
        self,
        view_id,
        **kwargs
    ):
        """get  # noqa: E501

        get  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get(view_id, async_req=True)
        >>> result = thread.get()

        Args:
            view_id (str): viewId

        Keyword Args:
            column_ids ([str], none_type): columnIds. [optional] if omitted the server will use the default value of []
            include ([str], none_type): include. [optional] if omitted the server will use the default value of []
            page (str, none_type): page. [optional] if omitted the server will use the default value of "{}"
            query (str, none_type): query. [optional] if omitted the server will use the default value of "{}"
            sort (str, none_type): sort. [optional] if omitted the server will use the default value of "{}"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            View
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['view_id'] = \
            view_id
        return self.get_endpoint.call_with_http_info(**kwargs)

    def get_statistic(
        self,
        view_id,
        **kwargs
    ):
        """getStatistic  # noqa: E501

        getStatistic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_statistic(view_id, async_req=True)
        >>> result = thread.get()

        Args:
            view_id (str): viewId

        Keyword Args:
            column_ids ([str], none_type): columnIds. [optional] if omitted the server will use the default value of []
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ViewStatistic
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['view_id'] = \
            view_id
        return self.get_statistic_endpoint.call_with_http_info(**kwargs)

    def import_view(
        self,
        view_id,
        file,
        **kwargs
    ):
        """importView  # noqa: E501

        importView  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_view(view_id, file, async_req=True)
        >>> result = thread.get()

        Args:
            view_id (str): viewId
            file (file_type): The following file types are supported: csv, tsv, xls, xlsx and json

        Keyword Args:
            import_request (str, none_type): importRequest. [optional] if omitted the server will use the default value of "{}"
            type (str, none_type): type. [optional] if omitted the server will use the default value of "csv"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['view_id'] = \
            view_id
        kwargs['file'] = \
            file
        return self.import_view_endpoint.call_with_http_info(**kwargs)

    def list(
        self,
        **kwargs
    ):
        """list  # noqa: E501

        list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            branch_id (str): branchId. [optional]
            grid_id (str): gridId. [optional]
            type (str): type. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [View]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_endpoint.call_with_http_info(**kwargs)

    def merge(
        self,
        destination_view_id,
        view_id,
        merge_branch_request,
        **kwargs
    ):
        """merge  # noqa: E501

        merge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge(destination_view_id, view_id, merge_branch_request, async_req=True)
        >>> result = thread.get()

        Args:
            destination_view_id (str): destinationViewId
            view_id (str): viewId
            merge_branch_request (MergeBranchRequest):

        Keyword Args:
            merge_record_options ([str], none_type): mergeRecordOptions. [optional] if omitted the server will use the default value of []
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Task
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['destination_view_id'] = \
            destination_view_id
        kwargs['view_id'] = \
            view_id
        kwargs['merge_branch_request'] = \
            merge_branch_request
        return self.merge_endpoint.call_with_http_info(**kwargs)

