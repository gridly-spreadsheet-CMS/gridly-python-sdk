# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.33.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class DateTimeFormat(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            dateFormat = schemas.StrSchema
            timeFormat = schemas.StrSchema
            zoneOffset = schemas.StrSchema
            showTimeZone = schemas.BoolSchema
            __annotations__ = {
                "dateFormat": dateFormat,
                "timeFormat": timeFormat,
                "zoneOffset": zoneOffset,
                "showTimeZone": showTimeZone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateFormat"]) -> MetaOapg.properties.dateFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeFormat"]) -> MetaOapg.properties.timeFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zoneOffset"]) -> MetaOapg.properties.zoneOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showTimeZone"]) -> MetaOapg.properties.showTimeZone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateFormat", "timeFormat", "zoneOffset", "showTimeZone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateFormat"]) -> typing.Union[MetaOapg.properties.dateFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeFormat"]) -> typing.Union[MetaOapg.properties.timeFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zoneOffset"]) -> typing.Union[MetaOapg.properties.zoneOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showTimeZone"]) -> typing.Union[MetaOapg.properties.showTimeZone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateFormat", "timeFormat", "zoneOffset", "showTimeZone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dateFormat: typing.Union[MetaOapg.properties.dateFormat, str, schemas.Unset] = schemas.unset,
        timeFormat: typing.Union[MetaOapg.properties.timeFormat, str, schemas.Unset] = schemas.unset,
        zoneOffset: typing.Union[MetaOapg.properties.zoneOffset, str, schemas.Unset] = schemas.unset,
        showTimeZone: typing.Union[MetaOapg.properties.showTimeZone, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DateTimeFormat':
        return super().__new__(
            cls,
            *args,
            dateFormat=dateFormat,
            timeFormat=timeFormat,
            zoneOffset=zoneOffset,
            showTimeZone=showTimeZone,
            _configuration=_configuration,
            **kwargs,
        )
