# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 5.9.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class TranslationCount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            all = schemas.Int64Schema
            outOfDate = schemas.Int64Schema
            unset = schemas.Int64Schema
            upToDate = schemas.Int64Schema
            __annotations__ = {
                "all": all,
                "outOfDate": outOfDate,
                "unset": unset,
                "upToDate": upToDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all"]) -> MetaOapg.properties.all: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outOfDate"]) -> MetaOapg.properties.outOfDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unset"]) -> MetaOapg.properties.unset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upToDate"]) -> MetaOapg.properties.upToDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["all", "outOfDate", "unset", "upToDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all"]) -> typing.Union[MetaOapg.properties.all, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outOfDate"]) -> typing.Union[MetaOapg.properties.outOfDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unset"]) -> typing.Union[MetaOapg.properties.unset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upToDate"]) -> typing.Union[MetaOapg.properties.upToDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["all", "outOfDate", "unset", "upToDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        all: typing.Union[MetaOapg.properties.all, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        outOfDate: typing.Union[MetaOapg.properties.outOfDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unset: typing.Union[MetaOapg.properties.unset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        upToDate: typing.Union[MetaOapg.properties.upToDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TranslationCount':
        return super().__new__(
            cls,
            *args,
            all=all,
            outOfDate=outOfDate,
            unset=unset,
            upToDate=upToDate,
            _configuration=_configuration,
            **kwargs,
        )
