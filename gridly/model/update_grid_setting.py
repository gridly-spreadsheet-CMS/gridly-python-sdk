# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 5.9.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class UpdateGridSetting(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def defaultDateTimeFormat() -> typing.Type['DateTimeFormat']:
                return DateTimeFormat
            
            
            class defaultSourceLanguageStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "unset": "UNSET",
                        "doNotTranslate": "DO_NOT_TRANSLATE",
                        "notReadyForTranslation": "NOT_READY_FOR_TRANSLATION",
                        "readyForTranslation": "READY_FOR_TRANSLATION",
                        "locked": "LOCKED",
                        "lockAllLanguages": "LOCK_ALL_LANGUAGES",
                    }
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
                
                @schemas.classproperty
                def DO_NOT_TRANSLATE(cls):
                    return cls("doNotTranslate")
                
                @schemas.classproperty
                def NOT_READY_FOR_TRANSLATION(cls):
                    return cls("notReadyForTranslation")
                
                @schemas.classproperty
                def READY_FOR_TRANSLATION(cls):
                    return cls("readyForTranslation")
                
                @schemas.classproperty
                def LOCKED(cls):
                    return cls("locked")
                
                @schemas.classproperty
                def LOCK_ALL_LANGUAGES(cls):
                    return cls("lockAllLanguages")
            translatorCanViewAutomations = schemas.BoolSchema
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "defaultDateTimeFormat": defaultDateTimeFormat,
                "defaultSourceLanguageStatus": defaultSourceLanguageStatus,
                "translatorCanViewAutomations": translatorCanViewAutomations,
                "metadata": metadata,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultDateTimeFormat"]) -> 'DateTimeFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultSourceLanguageStatus"]) -> MetaOapg.properties.defaultSourceLanguageStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translatorCanViewAutomations"]) -> MetaOapg.properties.translatorCanViewAutomations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultDateTimeFormat", "defaultSourceLanguageStatus", "translatorCanViewAutomations", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultDateTimeFormat"]) -> typing.Union['DateTimeFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultSourceLanguageStatus"]) -> typing.Union[MetaOapg.properties.defaultSourceLanguageStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translatorCanViewAutomations"]) -> typing.Union[MetaOapg.properties.translatorCanViewAutomations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultDateTimeFormat", "defaultSourceLanguageStatus", "translatorCanViewAutomations", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        defaultDateTimeFormat: typing.Union['DateTimeFormat', schemas.Unset] = schemas.unset,
        defaultSourceLanguageStatus: typing.Union[MetaOapg.properties.defaultSourceLanguageStatus, str, schemas.Unset] = schemas.unset,
        translatorCanViewAutomations: typing.Union[MetaOapg.properties.translatorCanViewAutomations, bool, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateGridSetting':
        return super().__new__(
            cls,
            *args,
            defaultDateTimeFormat=defaultDateTimeFormat,
            defaultSourceLanguageStatus=defaultSourceLanguageStatus,
            translatorCanViewAutomations=translatorCanViewAutomations,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from gridly.model.date_time_format import DateTimeFormat
