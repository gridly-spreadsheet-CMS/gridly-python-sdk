# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 5.9.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class NumberFormat(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DECIMAL(cls):
                    return cls("decimal")
                
                @schemas.classproperty
                def INTEGER(cls):
                    return cls("integer")
            decimalPlaces = schemas.Int32Schema
            currencySymbol = schemas.StrSchema
            use1000Separator = schemas.BoolSchema
            __annotations__ = {
                "type": type,
                "decimalPlaces": decimalPlaces,
                "currencySymbol": currencySymbol,
                "use1000Separator": use1000Separator,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decimalPlaces"]) -> MetaOapg.properties.decimalPlaces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencySymbol"]) -> MetaOapg.properties.currencySymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use1000Separator"]) -> MetaOapg.properties.use1000Separator: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "decimalPlaces", "currencySymbol", "use1000Separator", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decimalPlaces"]) -> typing.Union[MetaOapg.properties.decimalPlaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencySymbol"]) -> typing.Union[MetaOapg.properties.currencySymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use1000Separator"]) -> typing.Union[MetaOapg.properties.use1000Separator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "decimalPlaces", "currencySymbol", "use1000Separator", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        decimalPlaces: typing.Union[MetaOapg.properties.decimalPlaces, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currencySymbol: typing.Union[MetaOapg.properties.currencySymbol, str, schemas.Unset] = schemas.unset,
        use1000Separator: typing.Union[MetaOapg.properties.use1000Separator, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NumberFormat':
        return super().__new__(
            cls,
            *args,
            type=type,
            decimalPlaces=decimalPlaces,
            currencySymbol=currencySymbol,
            use1000Separator=use1000Separator,
            _configuration=_configuration,
            **kwargs,
        )
