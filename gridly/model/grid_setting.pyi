# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 5.9.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class GridSetting(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class defaultSourceLanguageStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
                
                @schemas.classproperty
                def DO_NOT_TRANSLATE(cls):
                    return cls("doNotTranslate")
                
                @schemas.classproperty
                def NOT_READY_FOR_TRANSLATION(cls):
                    return cls("notReadyForTranslation")
                
                @schemas.classproperty
                def READY_FOR_TRANSLATION(cls):
                    return cls("readyForTranslation")
                
                @schemas.classproperty
                def LOCKED(cls):
                    return cls("locked")
                
                @schemas.classproperty
                def LOCK_ALL_LANGUAGES(cls):
                    return cls("lockAllLanguages")
            translatorCanViewAutomations = schemas.BoolSchema
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FileCategory']:
                        return FileCategory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['FileCategory'], typing.List['FileCategory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FileCategory':
                    return super().__getitem__(i)
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            createdTime = schemas.DateTimeSchema
            lastModifiedTime = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
            lastModifiedBy = schemas.StrSchema
            __annotations__ = {
                "defaultSourceLanguageStatus": defaultSourceLanguageStatus,
                "translatorCanViewAutomations": translatorCanViewAutomations,
                "categories": categories,
                "metadata": metadata,
                "createdTime": createdTime,
                "lastModifiedTime": lastModifiedTime,
                "createdBy": createdBy,
                "lastModifiedBy": lastModifiedBy,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultSourceLanguageStatus"]) -> MetaOapg.properties.defaultSourceLanguageStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["translatorCanViewAutomations"]) -> MetaOapg.properties.translatorCanViewAutomations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdTime"]) -> MetaOapg.properties.createdTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedTime"]) -> MetaOapg.properties.lastModifiedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedBy"]) -> MetaOapg.properties.lastModifiedBy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultSourceLanguageStatus", "translatorCanViewAutomations", "categories", "metadata", "createdTime", "lastModifiedTime", "createdBy", "lastModifiedBy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultSourceLanguageStatus"]) -> typing.Union[MetaOapg.properties.defaultSourceLanguageStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["translatorCanViewAutomations"]) -> typing.Union[MetaOapg.properties.translatorCanViewAutomations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union[MetaOapg.properties.categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdTime"]) -> typing.Union[MetaOapg.properties.createdTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedTime"]) -> typing.Union[MetaOapg.properties.lastModifiedTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedBy"]) -> typing.Union[MetaOapg.properties.lastModifiedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultSourceLanguageStatus", "translatorCanViewAutomations", "categories", "metadata", "createdTime", "lastModifiedTime", "createdBy", "lastModifiedBy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        defaultSourceLanguageStatus: typing.Union[MetaOapg.properties.defaultSourceLanguageStatus, str, schemas.Unset] = schemas.unset,
        translatorCanViewAutomations: typing.Union[MetaOapg.properties.translatorCanViewAutomations, bool, schemas.Unset] = schemas.unset,
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        createdTime: typing.Union[MetaOapg.properties.createdTime, str, datetime, schemas.Unset] = schemas.unset,
        lastModifiedTime: typing.Union[MetaOapg.properties.lastModifiedTime, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        lastModifiedBy: typing.Union[MetaOapg.properties.lastModifiedBy, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GridSetting':
        return super().__new__(
            cls,
            *args,
            defaultSourceLanguageStatus=defaultSourceLanguageStatus,
            translatorCanViewAutomations=translatorCanViewAutomations,
            categories=categories,
            metadata=metadata,
            createdTime=createdTime,
            lastModifiedTime=lastModifiedTime,
            createdBy=createdBy,
            lastModifiedBy=lastModifiedBy,
            _configuration=_configuration,
            **kwargs,
        )

from gridly.model.file_category import FileCategory
