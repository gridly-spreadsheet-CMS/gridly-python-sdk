# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 5.9.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class Formula(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "formulaText",
        }
        
        class properties:
            formulaText = schemas.StrSchema
            alwaysFormatResultValueAsList = schemas.BoolSchema
            
            
            class detectResultValueType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LIST(cls):
                    return cls("list")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("string")
                
                @schemas.classproperty
                def DECIMAL(cls):
                    return cls("decimal")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("boolean")
                
                @schemas.classproperty
                def DATETIME(cls):
                    return cls("datetime")
                
                @schemas.classproperty
                def NA(cls):
                    return cls("na")
            __annotations__ = {
                "formulaText": formulaText,
                "alwaysFormatResultValueAsList": alwaysFormatResultValueAsList,
                "detectResultValueType": detectResultValueType,
            }
    
    formulaText: MetaOapg.properties.formulaText
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formulaText"]) -> MetaOapg.properties.formulaText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alwaysFormatResultValueAsList"]) -> MetaOapg.properties.alwaysFormatResultValueAsList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectResultValueType"]) -> MetaOapg.properties.detectResultValueType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["formulaText", "alwaysFormatResultValueAsList", "detectResultValueType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formulaText"]) -> MetaOapg.properties.formulaText: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alwaysFormatResultValueAsList"]) -> typing.Union[MetaOapg.properties.alwaysFormatResultValueAsList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectResultValueType"]) -> typing.Union[MetaOapg.properties.detectResultValueType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["formulaText", "alwaysFormatResultValueAsList", "detectResultValueType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        formulaText: typing.Union[MetaOapg.properties.formulaText, str, ],
        alwaysFormatResultValueAsList: typing.Union[MetaOapg.properties.alwaysFormatResultValueAsList, bool, schemas.Unset] = schemas.unset,
        detectResultValueType: typing.Union[MetaOapg.properties.detectResultValueType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Formula':
        return super().__new__(
            cls,
            *args,
            formulaText=formulaText,
            alwaysFormatResultValueAsList=alwaysFormatResultValueAsList,
            detectResultValueType=detectResultValueType,
            _configuration=_configuration,
            **kwargs,
        )
