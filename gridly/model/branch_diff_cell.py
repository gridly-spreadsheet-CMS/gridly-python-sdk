# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.33.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class BranchDiffCell(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class sourceDependencyStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "upToDate": "UP_TO_DATE",
                        "outOfDate": "OUT_OF_DATE",
                        "unset": "UNSET",
                    }
                
                @schemas.classproperty
                def UP_TO_DATE(cls):
                    return cls("upToDate")
                
                @schemas.classproperty
                def OUT_OF_DATE(cls):
                    return cls("outOfDate")
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
            
            
            class destinationDependencyStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "upToDate": "UP_TO_DATE",
                        "outOfDate": "OUT_OF_DATE",
                        "unset": "UNSET",
                    }
                
                @schemas.classproperty
                def UP_TO_DATE(cls):
                    return cls("upToDate")
                
                @schemas.classproperty
                def OUT_OF_DATE(cls):
                    return cls("outOfDate")
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
            
            
            class sourceSourceStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "unset": "UNSET",
                        "doNotTranslate": "DO_NOT_TRANSLATE",
                        "notReadyForTranslation": "NOT_READY_FOR_TRANSLATION",
                        "readyForTranslation": "READY_FOR_TRANSLATION",
                        "locked": "LOCKED",
                        "lockAllLanguages": "LOCK_ALL_LANGUAGES",
                    }
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
                
                @schemas.classproperty
                def DO_NOT_TRANSLATE(cls):
                    return cls("doNotTranslate")
                
                @schemas.classproperty
                def NOT_READY_FOR_TRANSLATION(cls):
                    return cls("notReadyForTranslation")
                
                @schemas.classproperty
                def READY_FOR_TRANSLATION(cls):
                    return cls("readyForTranslation")
                
                @schemas.classproperty
                def LOCKED(cls):
                    return cls("locked")
                
                @schemas.classproperty
                def LOCK_ALL_LANGUAGES(cls):
                    return cls("lockAllLanguages")
            
            
            class destinationSourceStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "unset": "UNSET",
                        "doNotTranslate": "DO_NOT_TRANSLATE",
                        "notReadyForTranslation": "NOT_READY_FOR_TRANSLATION",
                        "readyForTranslation": "READY_FOR_TRANSLATION",
                        "locked": "LOCKED",
                        "lockAllLanguages": "LOCK_ALL_LANGUAGES",
                    }
                
                @schemas.classproperty
                def UNSET(cls):
                    return cls("unset")
                
                @schemas.classproperty
                def DO_NOT_TRANSLATE(cls):
                    return cls("doNotTranslate")
                
                @schemas.classproperty
                def NOT_READY_FOR_TRANSLATION(cls):
                    return cls("notReadyForTranslation")
                
                @schemas.classproperty
                def READY_FOR_TRANSLATION(cls):
                    return cls("readyForTranslation")
                
                @schemas.classproperty
                def LOCKED(cls):
                    return cls("locked")
                
                @schemas.classproperty
                def LOCK_ALL_LANGUAGES(cls):
                    return cls("lockAllLanguages")
            sourceLengthSetting = schemas.Int32Schema
            destinationLengthSetting = schemas.Int32Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "behind": "BEHIND",
                        "ahead": "AHEAD",
                        "conflicted": "CONFLICTED",
                        "unchanged": "UNCHANGED",
                        "invalidData": "INVALID_DATA",
                        "na": "NA",
                        "empty": "EMPTY",
                        "targetTranslationEmpty": "TARGET_TRANSLATION_EMPTY",
                        "translationNotReady": "TRANSLATION_NOT_READY",
                        "translationNotFound": "TRANSLATION_NOT_FOUND",
                        "sourceTargetMismatched": "SOURCE_TARGET_MISMATCHED",
                        "targetChangedTMNotApproved": "TARGET_CHANGED_TMNOT_APPROVED",
                        "targetNotChanged": "TARGET_NOT_CHANGED",
                        "sourcedChanged": "SOURCED_CHANGED",
                        "targetChanged": "TARGET_CHANGED",
                        "textOverLength": "TEXT_OVER_LENGTH",
                        "translationNotChanged": "TRANSLATION_NOT_CHANGED",
                        "notChanged": "NOT_CHANGED",
                        "warningOff": "WARNING_OFF",
                    }
                
                @schemas.classproperty
                def BEHIND(cls):
                    return cls("behind")
                
                @schemas.classproperty
                def AHEAD(cls):
                    return cls("ahead")
                
                @schemas.classproperty
                def CONFLICTED(cls):
                    return cls("conflicted")
                
                @schemas.classproperty
                def UNCHANGED(cls):
                    return cls("unchanged")
                
                @schemas.classproperty
                def INVALID_DATA(cls):
                    return cls("invalidData")
                
                @schemas.classproperty
                def NA(cls):
                    return cls("na")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("empty")
                
                @schemas.classproperty
                def TARGET_TRANSLATION_EMPTY(cls):
                    return cls("targetTranslationEmpty")
                
                @schemas.classproperty
                def TRANSLATION_NOT_READY(cls):
                    return cls("translationNotReady")
                
                @schemas.classproperty
                def TRANSLATION_NOT_FOUND(cls):
                    return cls("translationNotFound")
                
                @schemas.classproperty
                def SOURCE_TARGET_MISMATCHED(cls):
                    return cls("sourceTargetMismatched")
                
                @schemas.classproperty
                def TARGET_CHANGED_TMNOT_APPROVED(cls):
                    return cls("targetChangedTMNotApproved")
                
                @schemas.classproperty
                def TARGET_NOT_CHANGED(cls):
                    return cls("targetNotChanged")
                
                @schemas.classproperty
                def SOURCED_CHANGED(cls):
                    return cls("sourcedChanged")
                
                @schemas.classproperty
                def TARGET_CHANGED(cls):
                    return cls("targetChanged")
                
                @schemas.classproperty
                def TEXT_OVER_LENGTH(cls):
                    return cls("textOverLength")
                
                @schemas.classproperty
                def TRANSLATION_NOT_CHANGED(cls):
                    return cls("translationNotChanged")
                
                @schemas.classproperty
                def NOT_CHANGED(cls):
                    return cls("notChanged")
                
                @schemas.classproperty
                def WARNING_OFF(cls):
                    return cls("warningOff")
            columnId = schemas.StrSchema
            sourceValue = schemas.DictSchema
            destinationValue = schemas.DictSchema
            __annotations__ = {
                "sourceDependencyStatus": sourceDependencyStatus,
                "destinationDependencyStatus": destinationDependencyStatus,
                "sourceSourceStatus": sourceSourceStatus,
                "destinationSourceStatus": destinationSourceStatus,
                "sourceLengthSetting": sourceLengthSetting,
                "destinationLengthSetting": destinationLengthSetting,
                "status": status,
                "columnId": columnId,
                "sourceValue": sourceValue,
                "destinationValue": destinationValue,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceDependencyStatus"]) -> MetaOapg.properties.sourceDependencyStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationDependencyStatus"]) -> MetaOapg.properties.destinationDependencyStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceSourceStatus"]) -> MetaOapg.properties.sourceSourceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationSourceStatus"]) -> MetaOapg.properties.destinationSourceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceLengthSetting"]) -> MetaOapg.properties.sourceLengthSetting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationLengthSetting"]) -> MetaOapg.properties.destinationLengthSetting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnId"]) -> MetaOapg.properties.columnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceValue"]) -> MetaOapg.properties.sourceValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationValue"]) -> MetaOapg.properties.destinationValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sourceDependencyStatus", "destinationDependencyStatus", "sourceSourceStatus", "destinationSourceStatus", "sourceLengthSetting", "destinationLengthSetting", "status", "columnId", "sourceValue", "destinationValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceDependencyStatus"]) -> typing.Union[MetaOapg.properties.sourceDependencyStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationDependencyStatus"]) -> typing.Union[MetaOapg.properties.destinationDependencyStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceSourceStatus"]) -> typing.Union[MetaOapg.properties.sourceSourceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationSourceStatus"]) -> typing.Union[MetaOapg.properties.destinationSourceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceLengthSetting"]) -> typing.Union[MetaOapg.properties.sourceLengthSetting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationLengthSetting"]) -> typing.Union[MetaOapg.properties.destinationLengthSetting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnId"]) -> typing.Union[MetaOapg.properties.columnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceValue"]) -> typing.Union[MetaOapg.properties.sourceValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationValue"]) -> typing.Union[MetaOapg.properties.destinationValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sourceDependencyStatus", "destinationDependencyStatus", "sourceSourceStatus", "destinationSourceStatus", "sourceLengthSetting", "destinationLengthSetting", "status", "columnId", "sourceValue", "destinationValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sourceDependencyStatus: typing.Union[MetaOapg.properties.sourceDependencyStatus, str, schemas.Unset] = schemas.unset,
        destinationDependencyStatus: typing.Union[MetaOapg.properties.destinationDependencyStatus, str, schemas.Unset] = schemas.unset,
        sourceSourceStatus: typing.Union[MetaOapg.properties.sourceSourceStatus, str, schemas.Unset] = schemas.unset,
        destinationSourceStatus: typing.Union[MetaOapg.properties.destinationSourceStatus, str, schemas.Unset] = schemas.unset,
        sourceLengthSetting: typing.Union[MetaOapg.properties.sourceLengthSetting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        destinationLengthSetting: typing.Union[MetaOapg.properties.destinationLengthSetting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        columnId: typing.Union[MetaOapg.properties.columnId, str, schemas.Unset] = schemas.unset,
        sourceValue: typing.Union[MetaOapg.properties.sourceValue, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        destinationValue: typing.Union[MetaOapg.properties.destinationValue, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BranchDiffCell':
        return super().__new__(
            cls,
            *args,
            sourceDependencyStatus=sourceDependencyStatus,
            destinationDependencyStatus=destinationDependencyStatus,
            sourceSourceStatus=sourceSourceStatus,
            destinationSourceStatus=destinationSourceStatus,
            sourceLengthSetting=sourceLengthSetting,
            destinationLengthSetting=destinationLengthSetting,
            status=status,
            columnId=columnId,
            sourceValue=sourceValue,
            destinationValue=destinationValue,
            _configuration=_configuration,
            **kwargs,
        )
