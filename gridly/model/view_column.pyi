# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.33.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class ViewColumn(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def dateTimeFormat() -> typing.Type['DateTimeFormat']:
                return DateTimeFormat
            dependsOn = schemas.StrSchema
            description = schemas.StrSchema
            editable = schemas.BoolSchema
        
            @staticmethod
            def formula() -> typing.Type['Formula']:
                return Formula
            isSource = schemas.BoolSchema
            isTarget = schemas.BoolSchema
            languageCode = schemas.StrSchema
            
            
            class localizationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SOURCE_LANGUAGE(cls):
                    return cls("sourceLanguage")
                
                @schemas.classproperty
                def TARGET_LANGUAGE(cls):
                    return cls("targetLanguage")
            name = schemas.StrSchema
        
            @staticmethod
            def numberFormat() -> typing.Type['NumberFormat']:
                return NumberFormat
        
            @staticmethod
            def reference() -> typing.Type['ColumnReference']:
                return ColumnReference
            
            
            class selectionOptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'selectionOptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SINGLE_LINE(cls):
                    return cls("singleLine")
                
                @schemas.classproperty
                def MULTIPLE_LINES(cls):
                    return cls("multipleLines")
                
                @schemas.classproperty
                def RICH_TEXT(cls):
                    return cls("richText")
                
                @schemas.classproperty
                def MARKDOWN(cls):
                    return cls("markdown")
                
                @schemas.classproperty
                def SINGLE_SELECTION(cls):
                    return cls("singleSelection")
                
                @schemas.classproperty
                def MULTIPLE_SELECTIONS(cls):
                    return cls("multipleSelections")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("boolean")
                
                @schemas.classproperty
                def NUMBER(cls):
                    return cls("number")
                
                @schemas.classproperty
                def DATETIME(cls):
                    return cls("datetime")
                
                @schemas.classproperty
                def FILES(cls):
                    return cls("files")
                
                @schemas.classproperty
                def REFERENCE(cls):
                    return cls("reference")
                
                @schemas.classproperty
                def LOOKUP(cls):
                    return cls("lookup")
                
                @schemas.classproperty
                def LANGUAGE(cls):
                    return cls("language")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("json")
                
                @schemas.classproperty
                def YAML(cls):
                    return cls("yaml")
                
                @schemas.classproperty
                def HTML(cls):
                    return cls("html")
                
                @schemas.classproperty
                def FORMULA(cls):
                    return cls("formula")
            __annotations__ = {
                "id": id,
                "dateTimeFormat": dateTimeFormat,
                "dependsOn": dependsOn,
                "description": description,
                "editable": editable,
                "formula": formula,
                "isSource": isSource,
                "isTarget": isTarget,
                "languageCode": languageCode,
                "localizationType": localizationType,
                "name": name,
                "numberFormat": numberFormat,
                "reference": reference,
                "selectionOptions": selectionOptions,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTimeFormat"]) -> 'DateTimeFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependsOn"]) -> MetaOapg.properties.dependsOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editable"]) -> MetaOapg.properties.editable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formula"]) -> 'Formula': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSource"]) -> MetaOapg.properties.isSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isTarget"]) -> MetaOapg.properties.isTarget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localizationType"]) -> MetaOapg.properties.localizationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberFormat"]) -> 'NumberFormat': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> 'ColumnReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectionOptions"]) -> MetaOapg.properties.selectionOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "dateTimeFormat", "dependsOn", "description", "editable", "formula", "isSource", "isTarget", "languageCode", "localizationType", "name", "numberFormat", "reference", "selectionOptions", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTimeFormat"]) -> typing.Union['DateTimeFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependsOn"]) -> typing.Union[MetaOapg.properties.dependsOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editable"]) -> typing.Union[MetaOapg.properties.editable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formula"]) -> typing.Union['Formula', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSource"]) -> typing.Union[MetaOapg.properties.isSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isTarget"]) -> typing.Union[MetaOapg.properties.isTarget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localizationType"]) -> typing.Union[MetaOapg.properties.localizationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberFormat"]) -> typing.Union['NumberFormat', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union['ColumnReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectionOptions"]) -> typing.Union[MetaOapg.properties.selectionOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "dateTimeFormat", "dependsOn", "description", "editable", "formula", "isSource", "isTarget", "languageCode", "localizationType", "name", "numberFormat", "reference", "selectionOptions", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        dateTimeFormat: typing.Union['DateTimeFormat', schemas.Unset] = schemas.unset,
        dependsOn: typing.Union[MetaOapg.properties.dependsOn, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        editable: typing.Union[MetaOapg.properties.editable, bool, schemas.Unset] = schemas.unset,
        formula: typing.Union['Formula', schemas.Unset] = schemas.unset,
        isSource: typing.Union[MetaOapg.properties.isSource, bool, schemas.Unset] = schemas.unset,
        isTarget: typing.Union[MetaOapg.properties.isTarget, bool, schemas.Unset] = schemas.unset,
        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
        localizationType: typing.Union[MetaOapg.properties.localizationType, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        numberFormat: typing.Union['NumberFormat', schemas.Unset] = schemas.unset,
        reference: typing.Union['ColumnReference', schemas.Unset] = schemas.unset,
        selectionOptions: typing.Union[MetaOapg.properties.selectionOptions, list, tuple, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ViewColumn':
        return super().__new__(
            cls,
            *args,
            id=id,
            dateTimeFormat=dateTimeFormat,
            dependsOn=dependsOn,
            description=description,
            editable=editable,
            formula=formula,
            isSource=isSource,
            isTarget=isTarget,
            languageCode=languageCode,
            localizationType=localizationType,
            name=name,
            numberFormat=numberFormat,
            reference=reference,
            selectionOptions=selectionOptions,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from gridly.model.column_reference import ColumnReference
from gridly.model.date_time_format import DateTimeFormat
from gridly.model.formula import Formula
from gridly.model.number_format import NumberFormat
