# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.33.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class Group(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            groupId = schemas.Int64Schema
            companyId = schemas.Int64Schema
            name = schemas.StrSchema
            logoUrl = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NORMAL(cls):
                    return cls("NORMAL")
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("ADMIN")
            
            
            class shareType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
                
                @schemas.classproperty
                def FULL(cls):
                    return cls("full")
                
                @schemas.classproperty
                def PROJECT(cls):
                    return cls("project")
                
                @schemas.classproperty
                def DATABASE(cls):
                    return cls("database")
                
                @schemas.classproperty
                def GRID(cls):
                    return cls("grid")
                
                @schemas.classproperty
                def VIEW(cls):
                    return cls("view")
            createdDate = schemas.DateTimeSchema
            lastModifiedDate = schemas.DateTimeSchema
            isSystemGroup = schemas.BoolSchema
            systemGroup = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "groupId": groupId,
                "companyId": companyId,
                "name": name,
                "logoUrl": logoUrl,
                "type": type,
                "shareType": shareType,
                "createdDate": createdDate,
                "lastModifiedDate": lastModifiedDate,
                "isSystemGroup": isSystemGroup,
                "systemGroup": systemGroup,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shareType"]) -> MetaOapg.properties.shareType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastModifiedDate"]) -> MetaOapg.properties.lastModifiedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSystemGroup"]) -> MetaOapg.properties.isSystemGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemGroup"]) -> MetaOapg.properties.systemGroup: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "groupId", "companyId", "name", "logoUrl", "type", "shareType", "createdDate", "lastModifiedDate", "isSystemGroup", "systemGroup", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> typing.Union[MetaOapg.properties.companyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> typing.Union[MetaOapg.properties.logoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shareType"]) -> typing.Union[MetaOapg.properties.shareType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastModifiedDate"]) -> typing.Union[MetaOapg.properties.lastModifiedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSystemGroup"]) -> typing.Union[MetaOapg.properties.isSystemGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemGroup"]) -> typing.Union[MetaOapg.properties.systemGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "groupId", "companyId", "name", "logoUrl", "type", "shareType", "createdDate", "lastModifiedDate", "isSystemGroup", "systemGroup", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        companyId: typing.Union[MetaOapg.properties.companyId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        shareType: typing.Union[MetaOapg.properties.shareType, str, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, datetime, schemas.Unset] = schemas.unset,
        lastModifiedDate: typing.Union[MetaOapg.properties.lastModifiedDate, str, datetime, schemas.Unset] = schemas.unset,
        isSystemGroup: typing.Union[MetaOapg.properties.isSystemGroup, bool, schemas.Unset] = schemas.unset,
        systemGroup: typing.Union[MetaOapg.properties.systemGroup, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Group':
        return super().__new__(
            cls,
            *args,
            id=id,
            groupId=groupId,
            companyId=companyId,
            name=name,
            logoUrl=logoUrl,
            type=type,
            shareType=shareType,
            createdDate=createdDate,
            lastModifiedDate=lastModifiedDate,
            isSystemGroup=isSystemGroup,
            systemGroup=systemGroup,
            _configuration=_configuration,
            **kwargs,
        )
