# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.33.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class View(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class columns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ViewColumn']:
                        return ViewColumn
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ViewColumn'], typing.List['ViewColumn']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'columns':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ViewColumn':
                    return super().__getitem__(i)
            gridId = schemas.StrSchema
            
            
            class gridStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("deleted")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("inactive")
                
                @schemas.classproperty
                def RESTORING(cls):
                    return cls("restoring")
                
                @schemas.classproperty
                def BACKING_UP(cls):
                    return cls("backingUp")
                
                @schemas.classproperty
                def UPLOADING(cls):
                    return cls("uploading")
                
                @schemas.classproperty
                def IMPORTING(cls):
                    return cls("importing")
                
                @schemas.classproperty
                def BRANCHING(cls):
                    return cls("branching")
                
                @schemas.classproperty
                def MERGING(cls):
                    return cls("merging")
                
                @schemas.classproperty
                def DUPLICATING(cls):
                    return cls("duplicating")
                
                @schemas.classproperty
                def CLEARING_RECORDS(cls):
                    return cls("clearingRecords")
                
                @schemas.classproperty
                def COPYING(cls):
                    return cls("copying")
            name = schemas.StrSchema
            
            
            class records(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Record']:
                        return Record
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Record'], typing.List['Record']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'records':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Record':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "columns": columns,
                "gridId": gridId,
                "gridStatus": gridStatus,
                "name": name,
                "records": records,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gridId"]) -> MetaOapg.properties.gridId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gridStatus"]) -> MetaOapg.properties.gridStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["records"]) -> MetaOapg.properties.records: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "columns", "gridId", "gridStatus", "name", "records", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> typing.Union[MetaOapg.properties.columns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gridId"]) -> typing.Union[MetaOapg.properties.gridId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gridStatus"]) -> typing.Union[MetaOapg.properties.gridStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["records"]) -> typing.Union[MetaOapg.properties.records, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "columns", "gridId", "gridStatus", "name", "records", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        columns: typing.Union[MetaOapg.properties.columns, list, tuple, schemas.Unset] = schemas.unset,
        gridId: typing.Union[MetaOapg.properties.gridId, str, schemas.Unset] = schemas.unset,
        gridStatus: typing.Union[MetaOapg.properties.gridStatus, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        records: typing.Union[MetaOapg.properties.records, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'View':
        return super().__new__(
            cls,
            *args,
            id=id,
            columns=columns,
            gridId=gridId,
            gridStatus=gridStatus,
            name=name,
            records=records,
            _configuration=_configuration,
            **kwargs,
        )

from gridly.model.record import Record
from gridly.model.view_column import ViewColumn
