# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 5.9.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class FilterField(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "operator",
        }
        
        class properties:
            
            
            class operator(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "isNull": "IS_NULL",
                        "isNotNull": "IS_NOT_NULL",
                        "isEmpty": "IS_EMPTY",
                        "isNotEmpty": "IS_NOT_EMPTY",
                        "contains": "CONTAINS",
                        "notContains": "NOT_CONTAINS",
                        "startsWith": "STARTS_WITH",
                        "notStartsWith": "NOT_STARTS_WITH",
                        "endsWith": "ENDS_WITH",
                        "notEndsWith": "NOT_ENDS_WITH",
                        "regexp": "REGEXP",
                        "notRegexp": "NOT_REGEXP",
                        "=": "EQUALS",
                        "!=": "EXCLAMATION_MARKEQUALS",
                        "<": "LESS_THAN",
                        "<=": "LESS_THAN_EQUALS",
                        ">": "GREATER_THAN",
                        ">=": "GREATER_THAN_EQUALS",
                        "in": "IN",
                        "notIn": "NOT_IN",
                        "modifiedBy": "MODIFIED_BY",
                        "notModifiedBy": "NOT_MODIFIED_BY",
                        "between": "BETWEEN",
                        "notBetween": "NOT_BETWEEN",
                        "hasQaError": "HAS_QA_ERROR",
                        "isLengthViolated": "IS_LENGTH_VIOLATED",
                        "hasTag": "HAS_TAG",
                        "spellCheck": "SPELL_CHECK",
                        "qaCheck": "QA_CHECK",
                        "isMt": "IS_MT",
                    }
                
                @schemas.classproperty
                def IS_NULL(cls):
                    return cls("isNull")
                
                @schemas.classproperty
                def IS_NOT_NULL(cls):
                    return cls("isNotNull")
                
                @schemas.classproperty
                def IS_EMPTY(cls):
                    return cls("isEmpty")
                
                @schemas.classproperty
                def IS_NOT_EMPTY(cls):
                    return cls("isNotEmpty")
                
                @schemas.classproperty
                def CONTAINS(cls):
                    return cls("contains")
                
                @schemas.classproperty
                def NOT_CONTAINS(cls):
                    return cls("notContains")
                
                @schemas.classproperty
                def STARTS_WITH(cls):
                    return cls("startsWith")
                
                @schemas.classproperty
                def NOT_STARTS_WITH(cls):
                    return cls("notStartsWith")
                
                @schemas.classproperty
                def ENDS_WITH(cls):
                    return cls("endsWith")
                
                @schemas.classproperty
                def NOT_ENDS_WITH(cls):
                    return cls("notEndsWith")
                
                @schemas.classproperty
                def REGEXP(cls):
                    return cls("regexp")
                
                @schemas.classproperty
                def NOT_REGEXP(cls):
                    return cls("notRegexp")
                
                @schemas.classproperty
                def EQUALS(cls):
                    return cls("=")
                
                @schemas.classproperty
                def EXCLAMATION_MARKEQUALS(cls):
                    return cls("!=")
                
                @schemas.classproperty
                def LESS_THAN(cls):
                    return cls("<")
                
                @schemas.classproperty
                def LESS_THAN_EQUALS(cls):
                    return cls("<=")
                
                @schemas.classproperty
                def GREATER_THAN(cls):
                    return cls(">")
                
                @schemas.classproperty
                def GREATER_THAN_EQUALS(cls):
                    return cls(">=")
                
                @schemas.classproperty
                def IN(cls):
                    return cls("in")
                
                @schemas.classproperty
                def NOT_IN(cls):
                    return cls("notIn")
                
                @schemas.classproperty
                def MODIFIED_BY(cls):
                    return cls("modifiedBy")
                
                @schemas.classproperty
                def NOT_MODIFIED_BY(cls):
                    return cls("notModifiedBy")
                
                @schemas.classproperty
                def BETWEEN(cls):
                    return cls("between")
                
                @schemas.classproperty
                def NOT_BETWEEN(cls):
                    return cls("notBetween")
                
                @schemas.classproperty
                def HAS_QA_ERROR(cls):
                    return cls("hasQaError")
                
                @schemas.classproperty
                def IS_LENGTH_VIOLATED(cls):
                    return cls("isLengthViolated")
                
                @schemas.classproperty
                def HAS_TAG(cls):
                    return cls("hasTag")
                
                @schemas.classproperty
                def SPELL_CHECK(cls):
                    return cls("spellCheck")
                
                @schemas.classproperty
                def QA_CHECK(cls):
                    return cls("qaCheck")
                
                @schemas.classproperty
                def IS_MT(cls):
                    return cls("isMt")
            caseSensitive = schemas.BoolSchema
            columnId = schemas.StrSchema
            dynamicColumn = schemas.StrSchema
            queryPathTagViaId = schemas.BoolSchema
            
            
            class subField(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "_dependencyStatus": "DEPENDENCY_STATUS",
                        "_sourceStatus": "SOURCE_STATUS",
                        "_targetStatus": "TARGET_STATUS",
                        "_flowStatus": "FLOW_STATUS",
                        "_tm": "TM",
                        "_mt": "MT",
                        "_ticket": "TICKET",
                        "_color": "COLOR",
                        "_metadata": "METADATA",
                        "_cell_metadata": "CELL_METADATA",
                        "_word_count": "WORD_COUNT",
                        "_previewSourceData": "PREVIEW_SOURCE_DATA",
                        "_previewSourceDependencyStatus": "PREVIEW_SOURCE_DEPENDENCY_STATUS",
                        "_previewStatus": "PREVIEW_STATUS",
                        "_previewMergeOption": "PREVIEW_MERGE_OPTION",
                        "_relativeTime": "RELATIVE_TIME",
                        "_length_violated": "LENGTH_VIOLATED",
                        "_lengthSetting": "LENGTH_SETTING",
                        "_workflow": "WORKFLOW",
                        "_workflowStepTransitioned": "WORKFLOW_STEP_TRANSITIONED",
                        "_repetition": "REPETITION",
                        "_qaCheckStatus": "QA_CHECK_STATUS",
                        "_spellCheckStatus": "SPELL_CHECK_STATUS",
                        "_hasTag": "HAS_TAG",
                    }
                
                @schemas.classproperty
                def DEPENDENCY_STATUS(cls):
                    return cls("_dependencyStatus")
                
                @schemas.classproperty
                def SOURCE_STATUS(cls):
                    return cls("_sourceStatus")
                
                @schemas.classproperty
                def TARGET_STATUS(cls):
                    return cls("_targetStatus")
                
                @schemas.classproperty
                def FLOW_STATUS(cls):
                    return cls("_flowStatus")
                
                @schemas.classproperty
                def TM(cls):
                    return cls("_tm")
                
                @schemas.classproperty
                def MT(cls):
                    return cls("_mt")
                
                @schemas.classproperty
                def TICKET(cls):
                    return cls("_ticket")
                
                @schemas.classproperty
                def COLOR(cls):
                    return cls("_color")
                
                @schemas.classproperty
                def METADATA(cls):
                    return cls("_metadata")
                
                @schemas.classproperty
                def CELL_METADATA(cls):
                    return cls("_cell_metadata")
                
                @schemas.classproperty
                def WORD_COUNT(cls):
                    return cls("_word_count")
                
                @schemas.classproperty
                def PREVIEW_SOURCE_DATA(cls):
                    return cls("_previewSourceData")
                
                @schemas.classproperty
                def PREVIEW_SOURCE_DEPENDENCY_STATUS(cls):
                    return cls("_previewSourceDependencyStatus")
                
                @schemas.classproperty
                def PREVIEW_STATUS(cls):
                    return cls("_previewStatus")
                
                @schemas.classproperty
                def PREVIEW_MERGE_OPTION(cls):
                    return cls("_previewMergeOption")
                
                @schemas.classproperty
                def RELATIVE_TIME(cls):
                    return cls("_relativeTime")
                
                @schemas.classproperty
                def LENGTH_VIOLATED(cls):
                    return cls("_length_violated")
                
                @schemas.classproperty
                def LENGTH_SETTING(cls):
                    return cls("_lengthSetting")
                
                @schemas.classproperty
                def WORKFLOW(cls):
                    return cls("_workflow")
                
                @schemas.classproperty
                def WORKFLOW_STEP_TRANSITIONED(cls):
                    return cls("_workflowStepTransitioned")
                
                @schemas.classproperty
                def REPETITION(cls):
                    return cls("_repetition")
                
                @schemas.classproperty
                def QA_CHECK_STATUS(cls):
                    return cls("_qaCheckStatus")
                
                @schemas.classproperty
                def SPELL_CHECK_STATUS(cls):
                    return cls("_spellCheckStatus")
                
                @schemas.classproperty
                def HAS_TAG(cls):
                    return cls("_hasTag")
            
            
            class values(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'values':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "operator": operator,
                "caseSensitive": caseSensitive,
                "columnId": columnId,
                "dynamicColumn": dynamicColumn,
                "queryPathTagViaId": queryPathTagViaId,
                "subField": subField,
                "values": values,
            }
    
    operator: MetaOapg.properties.operator
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSensitive"]) -> MetaOapg.properties.caseSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnId"]) -> MetaOapg.properties.columnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamicColumn"]) -> MetaOapg.properties.dynamicColumn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryPathTagViaId"]) -> MetaOapg.properties.queryPathTagViaId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subField"]) -> MetaOapg.properties.subField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["operator", "caseSensitive", "columnId", "dynamicColumn", "queryPathTagViaId", "subField", "values", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSensitive"]) -> typing.Union[MetaOapg.properties.caseSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnId"]) -> typing.Union[MetaOapg.properties.columnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamicColumn"]) -> typing.Union[MetaOapg.properties.dynamicColumn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryPathTagViaId"]) -> typing.Union[MetaOapg.properties.queryPathTagViaId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subField"]) -> typing.Union[MetaOapg.properties.subField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> typing.Union[MetaOapg.properties.values, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["operator", "caseSensitive", "columnId", "dynamicColumn", "queryPathTagViaId", "subField", "values", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        operator: typing.Union[MetaOapg.properties.operator, str, ],
        caseSensitive: typing.Union[MetaOapg.properties.caseSensitive, bool, schemas.Unset] = schemas.unset,
        columnId: typing.Union[MetaOapg.properties.columnId, str, schemas.Unset] = schemas.unset,
        dynamicColumn: typing.Union[MetaOapg.properties.dynamicColumn, str, schemas.Unset] = schemas.unset,
        queryPathTagViaId: typing.Union[MetaOapg.properties.queryPathTagViaId, bool, schemas.Unset] = schemas.unset,
        subField: typing.Union[MetaOapg.properties.subField, str, schemas.Unset] = schemas.unset,
        values: typing.Union[MetaOapg.properties.values, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FilterField':
        return super().__new__(
            cls,
            *args,
            operator=operator,
            caseSensitive=caseSensitive,
            columnId=columnId,
            dynamicColumn=dynamicColumn,
            queryPathTagViaId=queryPathTagViaId,
            subField=subField,
            values=values,
            _configuration=_configuration,
            **kwargs,
        )
