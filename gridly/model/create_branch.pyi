# coding: utf-8

"""
    Gridly API

    Gridly API documentation  # noqa: E501

    The version of the OpenAPI document: 4.33.0
    Contact: support@gridly.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gridly import schemas  # noqa: F401


class CreateBranch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class customProperties(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'customProperties':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            inheritGroupAccess = schemas.BoolSchema
            inheritAutomation = schemas.BoolSchema
            viewId = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "description": description,
                "customProperties": customProperties,
                "inheritGroupAccess": inheritGroupAccess,
                "inheritAutomation": inheritAutomation,
                "viewId": viewId,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customProperties"]) -> MetaOapg.properties.customProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inheritGroupAccess"]) -> MetaOapg.properties.inheritGroupAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inheritAutomation"]) -> MetaOapg.properties.inheritAutomation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewId"]) -> MetaOapg.properties.viewId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "customProperties", "inheritGroupAccess", "inheritAutomation", "viewId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customProperties"]) -> typing.Union[MetaOapg.properties.customProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inheritGroupAccess"]) -> typing.Union[MetaOapg.properties.inheritGroupAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inheritAutomation"]) -> typing.Union[MetaOapg.properties.inheritAutomation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewId"]) -> typing.Union[MetaOapg.properties.viewId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "customProperties", "inheritGroupAccess", "inheritAutomation", "viewId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        customProperties: typing.Union[MetaOapg.properties.customProperties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        inheritGroupAccess: typing.Union[MetaOapg.properties.inheritGroupAccess, bool, schemas.Unset] = schemas.unset,
        inheritAutomation: typing.Union[MetaOapg.properties.inheritAutomation, bool, schemas.Unset] = schemas.unset,
        viewId: typing.Union[MetaOapg.properties.viewId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateBranch':
        return super().__new__(
            cls,
            *args,
            name=name,
            description=description,
            customProperties=customProperties,
            inheritGroupAccess=inheritGroupAccess,
            inheritAutomation=inheritAutomation,
            viewId=viewId,
            _configuration=_configuration,
            **kwargs,
        )
